# Python Automation testing and deploy example

# This template allows you to push your robot from your GitLab repository to your configured
# Control Room. This configuration will run an automation's unit tests via `rcc` and deploy
# the robot to the Control Room depending on the configured environment.

# Prerequisites:
# You must configure the following variables within a GitLab environment:
# * $CR_ACCESS_CREDENTIALS
# * $CR_ENDPOINT_URL
# * $ROBOT_ID
# * $WORKSPACE_ID
# The ROBOT_ID and WORKSPACE_ID should be configured at the deployment level so each pipeline deploys
# to the correct Workspace environment.
# The robot in control room must be configured as a `robot file` type of robot.
# For more information on creating/getting these values in control room, check out https://robocorp.com/docs/rcc/workflow
image: ubuntu:latest

variables:
  CR_ACCESS_CREDENTIALS: $CR_ACCESS_CREDENTIALS
  CR_ENDPOINT_URL: $CR_ENDPOINT_URL
  ROBOT_ID: $ROBOT_ID
  WORKSPACE_ID: $WORKSPACE_ID
  ROBOCORP_HOME: /home/runner/.robocorp

cache:
  paths:
    - /home/runner/.robocorp

before_script:
  - wget -O rcc https://downloads.robocorp.com/rcc/releases/latest/linux64/rcc
  - chmod a+x rcc
  - mv rcc /usr/local/bin/
  - rcc holotree variables robot.yaml

test:
  script:
    - rcc run -t "UNIT TESTS"

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
